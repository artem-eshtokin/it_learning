# 1. Известно что для архивации файлов существует пакет gzip, который работает только с файлами. Также есть пакет tar, который может объединять файлы в один. Приведите команду, которая запаковывает все файлы с расширением log в каталоге /home/de13an/de/files в архив quiz.tar.gz, при этом использует максимальную степень сжатия.

# Решение

tar -c /home/de13an/de/files/*.log | gzip -9 > /home/de13an/XXXX/quiz.tar.gz

# В задании не указано это требование, но не смог найти у пакета tar команду скрывать древо папок, поэтому сделал второе решение:

( cd /home/de13an/de/files/ ; tar -c *.log ) | gzip -9 > /home/de13an/XXXX/quiz.tar.gz


# 2. Имеется скрипт quiz.sh:
# [de1m@data-engineering ~]$ ls -l /home/myuser/
# -rw-r--r-- 1 myuser mygroup 1024 Jan 26 14:21 quiz.sh
# Нужно сделать так, чтобы:
# a) файл могли запускать все
# b) файл могли изменять владелец и группа
# c) все пользователи сервера, не являющиеся владельцем и не входящие в его группу, не могли читать этот файл
# Приведите пример команды chmod, которая выдает или отбирает минимально необходимое количество прав (например, не надо выдавать права на чтение владельцу - они и так у него есть).

chmod 771 /home/myuser/quiz.sh
# или
chmod a+x,g+w,o-r /home/myuser/quiz.sh

# 3. Напишите bash-скрипт, сохраняющий все запущенные процессы пользователя de13an в файл processes.txt. В задаче есть допущение что имя процесса не может содержать слово de13an.

#!/bin/bash
ps -U de13an -u de13an u > processes.txt

# 4. Напишите bash-скрипт, сохраняющий подробное описание объектов, расположенных в каталоге /home/de13an, но не принадлежащих пользователю de13an (владелец не de13an) в файл description.txt. В задаче есть допущение что имя файла или группы не может содержать слово de13an.

#!/bin/bash
ls -lhaF /home/de13an/ | grep -wvi de13an > description.txt

# 5. 5. Составьте crontab файл для следующих процессов:
# daily1.sh - ежедневно в 23:55.
# daily2.sh - ежедневно в 8:00 и 17:00
# hourly.sh - каждый час в рабочее время (пн-пт, 8:00-17:30)
# happy_new_year.sh - в момент наступления нового года
# quatre.sh - каждые 4 часа

55 23 * * * daily1.sh
0 8,17 * * * daily2.sh
18 8-17 * * 1-5 hourly.sh
0 0 1 1 * happy_new_year.sh
14 3/4 * * * quatre.sh

# Так как для hourly.sh и quatre.sh не указано точнее время запуска, то сдвинул минуты, чтобы разгрузить популярные часы.